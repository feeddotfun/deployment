name: Deploy to Server
on:
 push:
   branches: [ production ]
 repository_dispatch:
   types: [feed-app-update, news-meme-ai-update] 

jobs:
 deploy:
   runs-on: ubuntu-latest
   steps:
     - uses: actions/checkout@v3
       with:
         submodules: true
         fetch-depth: 0
         token: ${{ secrets.GH_PAT }}

     - name: Update submodules
       if: github.event_name == 'repository_dispatch'
       env:
          GH_PAT: ${{ secrets.GH_PAT }}
       run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git remote set-url origin https://x-access-token:${GH_PAT}@github.com/feeddotfun/deployment.git

          # Force update submodules to latest commit
          git submodule foreach --recursive '
            git fetch origin production
            git checkout production
            git reset --hard origin/production
            git clean -fd
          '
          
          # Update the parent repo's reference to the submodules
          git add .
          git diff --staged --quiet || git commit -m "Update submodules to latest commit"
          git push origin production || echo "No changes to push"

     - name: Create ENV file
       env:
         MONGODB_URI: ${{ secrets.MONGODB_URI }}
         FEED_APP_ENV: ${{ secrets.FEED_APP_ENV }}
         NEWS_MEME_AI_ENV: ${{ secrets.NEWS_MEME_AI_ENV }}
         NEXT_PUBLIC_RPC_URL: ${{ secrets.NEXT_PUBLIC_RPC_URL }}
         NEXT_PUBLIC_UPLOAD_API_URL: ${{ secrets.NEXT_PUBLIC_UPLOAD_API_URL }}
         NEXT_PUBLIC_UPLOAD_API_KEY: ${{ secrets.NEXT_PUBLIC_UPLOAD_API_KEY }}
         NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}
       run: |
         if [ -z "$MONGODB_URI" ]; then
           echo "Error: MONGODB_URI is not set"
           exit 1
         fi
         
         echo "MONGODB_URI=$MONGODB_URI" > .env
         echo "NEXT_PUBLIC_RPC_URL=${NEXT_PUBLIC_RPC_URL}" >> .env
         echo "NEXT_PUBLIC_UPLOAD_API_URL=${NEXT_PUBLIC_UPLOAD_API_URL}" >> .env
         echo "NEXT_PUBLIC_UPLOAD_API_KEY=${NEXT_PUBLIC_UPLOAD_API_KEY}" >> .env
         echo "NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL}" >> .env 

         mkdir -p services/feed_app
         mkdir -p services/news_meme_ai
         
         if [ -z "$FEED_APP_ENV" ]; then
           echo "Error: FEED_APP_ENV is not set"
           exit 1
         fi
         echo "$FEED_APP_ENV" > services/feed_app/.env.production
         
         if [ -z "$NEWS_MEME_AI_ENV" ]; then
           echo "Error: NEWS_MEME_AI_ENV is not set"
           exit 1
         fi
         echo "$NEWS_MEME_AI_ENV" > services/news_meme_ai/.env.production

     - name: Setup SSH
       env:
         SSH_PRIVATE_KEY: ${{ secrets.DO_SSH_PRIVATE_KEY }}
         SERVER_HOST: ${{ secrets.DO_HOST }}
         SERVER_USER: ${{ secrets.DO_USER }}
       run: |
         if [ -z "$SSH_PRIVATE_KEY" ]; then
           echo "Error: SSH_PRIVATE_KEY is not set"
           exit 1
         fi
         
         mkdir -p ~/.ssh
         echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
         chmod 600 ~/.ssh/id_rsa
         ssh-keyscan -H $SERVER_HOST >> ~/.ssh/known_hosts
         
         # Test SSH connection
         if ! ssh -q $SERVER_USER@$SERVER_HOST exit; then
           echo "Error: SSH connection failed"
           exit 1
         fi

     - name: Deploy to Digital Ocean
       env:
         SERVER_HOST: ${{ secrets.DO_HOST }}
         SERVER_USER: ${{ secrets.DO_USER }}
       run: |
         echo "Starting deployment..."
         
         ssh $SERVER_USER@$SERVER_HOST 'bash -s' << 'ENDSSH'
           set -e  # Exit on any error
           echo "Preparing deployment directory..."
           if [ ! -d "~/deployment/.git" ]; then
              echo "Git repository not found. Creating new..."
              rm -rf ~/deployment
              mkdir -p ~/deployment
              cd ~/deployment
              git clone --recursive https://github.com/feeddotfun/deployment.git .
            else
              echo "Git repository exists. Updating..."
              cd ~/deployment
            fi

           git fetch origin
           git reset --hard origin/production
           git submodule update --init --recursive --force

           git submodule status
         ENDSSH
         
         echo "Copying environment files..."
         scp .env $SERVER_USER@$SERVER_HOST:~/deployment/.env
         scp services/feed_app/.env.production $SERVER_USER@$SERVER_HOST:~/deployment/services/feed_app/.env.production
         scp services/news_meme_ai/.env.production $SERVER_USER@$SERVER_HOST:~/deployment/services/news_meme_ai/.env.production
         
         ssh $SERVER_USER@$SERVER_HOST 'bash -s' << 'ENDSSH'
           set -e  # Exit on any error
           cd ~/deployment

           echo "Deploying with Docker..."
           docker compose down --remove-orphans
           docker compose pull           
           docker compose up -d --build      
           docker image prune -f
           
           echo "Deployment completed successfully!"
         ENDSSH